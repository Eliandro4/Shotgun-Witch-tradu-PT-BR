{
    "Strings": [
        "prototype",
        "@@array@@",
        "arguments",
        "argument0",
        "shake_remain",
        "shake_magnitude",
        "argument1",
        "shake_length",
        "gml_Script_ScreenShake",
        "method",
        "ScreenShake",
        "flash",
        "randomize",
        "creator",
        "instance_destroy",
        "draw_self",
        "shader_set",
        "shader_reset",
        "event_inherited",
        "Debris",
        "y",
        "x",
        "instance_create_layer",
        "timer",
        "used",
        "distance_to_object",
        "keyboard_check_pressed",
        "Bullet",
        "wavebegin",
        "audio_play_sound",
        "draw_sprite",
        "@@Other@@",
        "hp",
        "straight",
        "repeater",
        "rtimer",
        "repeated",
        "off",
        "Gun",
        "wave_enem_count",
        "speed",
        "direction",
        "image_index",
        "image_speed",
        "instance_exists",
        "yeh",
        "@@This@@",
        "timer_shot",
        "choose",
        "move_type",
        "direct_r",
        "direct_d",
        "state",
        "once",
        "place_meeting",
        "sprite_index",
        "image_xscale",
        "destination_x",
        "destination_y",
        "yup",
        "xTo",
        "yTo",
        "distance_to_point",
        "clamp",
        "push",
        "point_direction",
        "lengthdir_x",
        "lengthdir_y",
        "shot_timer",
        "wave_shot",
        "finish_shot",
        "direction_shot",
        "shoot",
        "fwd_rvs",
        "type",
        "dead",
        "dead_timer",
        "corner_spawn_timer",
        "corner_spawned",
        "spawn_corners",
        "spawncorner",
        "Room Slayer",
        "steam_get_achievement",
        "steam_set_achievement",
        "infinite",
        "audio_stop_sound",
        "GUI",
        "irandom_range",
        "Enemies",
        "hsp",
        "vsp",
        "msp",
        "knockbacktimer",
        "hit",
        "enem_x",
        "enem_y",
        "dashtimer",
        "ported",
        "keyboard_check",
        "key_left",
        "key_right",
        "key_up",
        "key_down",
        "death_x",
        "death_y",
        "death_f",
        "room_goto",
        "hmove",
        "vmove",
        "mouse_x",
        "sign",
        "window_set_cursor",
        "firingdelay",
        "recoil",
        "clip",
        "mouse_y",
        "image_angle",
        "max",
        "mouse_check_button",
        "image_yscale",
        "view_camera",
        "cam",
        "camera_get_view_width",
        "view_w_half",
        "camera_get_view_height",
        "view_h_half",
        "camera_set_view_pos",
        "random_range",
        "enemies_present",
        "delta_time",
        "room_speed",
        "draw_set_alpha",
        "draw_set_color",
        "draw_set_halign",
        "draw_set_valign",
        "draw_set_font",
        "TIME:",
        "string",
        ":",
        "draw_text",
        "spawn_place",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "wavestopper",
        "wave_no",
        "instance_deactivate_all",
        "room_height",
        "room_width",
        "draw_rectangle",
        "PAUSADO",
        "ESC PRA RESUMIR - F1 PRA SAIR - F2 PRO MENU",
        "F3 PARA FULLSCREEN",
        "instance_activate_all",
        "game_end",
        "Check.sav",
        "file_exists",
        "file_delete",
        "SCORE",
        "ESC PARA RESUMIR - F1 PRA SAIR",
        "window_get_fullscreen",
        "window_set_fullscreen",
        "window_set_size",
        "game_restart",
        "FIM DE JOGO",
        "VOCÊ CHEGOU NA ONDA: ",
        "wave_reached",
        " IN ",
        "time_elasped",
        "[R] PRA REINICIAR A ONDA - F1 PRA SAIR",
        "image_alpha",
        "audio_is_playing",
        "enem_type",
        "First Blood",
        "id",
        "yop",
        "ya",
        "fltimer",
        "game_over",
        "Background",
        "layer_get_id",
        "bglayerid",
        "layer_background_get_id",
        "bgid",
        "bg",
        "BRUXA NORMAL",
        "working_directory",
        "Deathcounter.sav",
        "file_text_open_write",
        "file",
        "file_text_write_real",
        "file_text_close",
        "death",
        "file_text_open_read",
        "file_text_read_real",
        "load",
        "layer_background_index",
        "Yep.",
        "hELP",
        "audio_stop_all",
        "Instances",
        "slide_in",
        "WAVE ",
        "alpha",
        "hovered",
        "mouse_check_button_pressed",
        "NOVO JOGO",
        "room_goto_next",
        "MODO INFINITO",
        "TEST BOSS",
        "CREDITOS",
        "BACK",
        "CREDITOS DA MUSICA",
        "SAIR",
        "up",
        "CRIADO POR",
        "ASEPHY E DEMENTORI",
        "ARTE E ANIMAÇÃO",
        "DEMENTORI",
        "PROGRAMAÇÃO",
        "ASEPHY",
        "IMAGEM DO MENU PRINCIPAL",
        "JCHOCO",
        "MUSICAS",
        "MENU PRINCIPAL",
        "NUMIN - PERITUNES",
        "MUSICA DAS ONDAS",
        "CYBERPUNK CITY - PERITUNES",
        "MUSICA DE BOSS",
        "FLAP2 - PERITUNES",
        "VITORIA",
        "PASTORALE - PERITUNES",
        "https://peritune.com/",
        "Demônios roubaram seu livro de feitiços enquanto você dormia.",
        "text",
        "Sem isso, você não pode continuar sua jornada no dominio de feitiços.",
        "Nossa heroína agora despojada, as únicas posses que restam são as roupas que veste...",
        "...e sua espingarda de cano duplo Remington. Apenas por $109,95 na S-Mart.",
        "Ninguem tocou seu livro.",
        "boxWidth",
        "stringHeight",
        "page",
        "charCount",
        "string_length",
        "array_length_1d",
        "string_copy",
        "textPart",
        "draw_text_ext",
        "PARABENS.",
        "Você consegiu seu livro de volta!",
        "O dia foi salvo. E você guarda sua Remington de cano duplo",
        "E o título de bruxa da espingarda... se vai.",
        "ini_open",
        "Checks if boss is beaten",
        "Key?",
        "Save",
        "ini_write_string",
        "ini_close",
        "BRUXA DA ESPINGARDA",
        "Default",
        "SHOTGUN_WITCH",
        "@@SleepMargin",
        "10",
        "@@DrawColour",
        "4294967295",
        "snd_shotgun_shot",
        "snd_shotgun_reload",
        "msc_music",
        "snd_hit",
        "snd_player_hit",
        "snd_lightning",
        "snd_pump_exp",
        "snd_woosh",
        "snd_hit_ech",
        "msc_MM",
        "snd_swoosh",
        "snd_witch_laugh",
        "snd_siren",
        "msc_boss",
        "snd_monster_roar",
        "snd_spit",
        "msc_win",
        "audiogroup_default",
        "s_player",
        "",
        "GMSpriteFramesTrack",
        "frames",
        "s_player_walk",
        "s_player_backwards",
        "s_player_death",
        "s_gun",
        "s_gun_r",
        "s_bullet",
        "s_cursor",
        "s_cursor1",
        "s_cursor2",
        "s_cursor_r",
        "s_space_prompt",
        "s_wall",
        "s_sp",
        "s_spawn",
        "s_player_tele",
        "s_ped_spawn",
        "s_BOSS_spawn",
        "s_debris",
        "s_debris_enem",
        "s_debris_boss",
        "s_debris_blood",
        "s_sprite_bullet_debris",
        "s_BG",
        "s_pedestal",
        "s_bullet_e",
        "s_bullet_b",
        "s_test_enem",
        "s_enem_spawner",
        "s_BOSS_spawnerr",
        "s_test_enem_d",
        "s_test_enem2",
        "s_test_enem2_idle",
        "s_test_enem2_atk",
        "s_test_enem2__recover",
        "s_pumpkin_bomb",
        "s_pumpkin_explosion",
        "s_pumpkin_explosion_marker",
        "s_pumpkin_shadow",
        "s_test_enem3",
        "s_test_enem3_shoot2",
        "s_test_enem3_shoot",
        "s_blood",
        "s_story_witch",
        "s_story_witch2",
        "Button_temp",
        "s_tutorial",
        "s_tit",
        "s_tit2",
        "s_embers",
        "s_WAVE",
        "s_witch_bowl",
        "s_boss_warning",
        "s_tit3",
        "sh_white",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\tfloat atten = 1.0 / (veclen / posrange.w);\n\tif (veclen > posrange.w)\n\t{\n\t\tatten = 0.0;\n\t}\n#else\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\n\t\tws_normal = -normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor = vec4(1.0,1.0,1.0, gl_FragColor.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\tfloat atten = 1.0 / (veclen / posrange.w);\n\tif (veclen > posrange.w)\n\t{\n\t\tatten = 0.0;\n\t}\n#else\n\tfloat atten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD_VIEW] * objectspacenormal4).xyz;\n\t\tws_normal = -normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor = vec4(1.0,1.0,1.0, gl_FragColor.a);\r\n}\r\n",
        "#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nfloat4x4 \tgm_Matrices[MATRICES_MAX] : register(c0);\n\nbool \tgm_LightingEnabled;\nbool \tgm_VS_FogEnabled;\nfloat \tgm_FogStart;\nfloat \tgm_RcpFogRange;\n\n#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nfloat4 gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nfloat3 gm_Lights_Direction[MAX_VS_LIGHTS];\t\t\t// normalised direction\nfloat4 gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nfloat4 gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t\t// rgb=colour, a=1\n\n",
        "// GameMaker reserved and common types/inputs\n\nsampler2D gm_BaseTexture : register(S0);\n\nbool \tgm_PS_FogEnabled;\nfloat4 \tgm_FogColour;\nbool \tgm_AlphaTestEnabled;\nfloat4\tgm_AlphaRefValue;\n",
        "in_Position",
        "in_Colour",
        "in_TextureCoord",
        "fnt_standard",
        "Dogica",
        "fnt_wave",
        "fnt_smaller",
        "Chaparral Pro Light",
        "o_spawn_puff_delete",
        "o_wall",
        "o_pedestal",
        "o_bullet",
        "o_bullet_enemy",
        "o_test_enem_corner",
        "o_test_enem2",
        "o_test_enem3",
        "o_pumpkin_explosion",
        "o_bullet_boss",
        "o_player",
        "o_gun",
        "o_camera",
        "o_fake_cursor",
        "obj_gui",
        "o_spawn_point",
        "obj_pause",
        "obj_game_over",
        "o_debris",
        "o_debris_enem",
        "o_blood_debris",
        "o_bullet_debris",
        "o_boss_debris",
        "o_blood",
        "o_spawn_puff",
        "o_spawner",
        "o_boss_spawner",
        "o_spawner_corners",
        "o_player_puff",
        "o_ped_puff",
        "o_spawn_puff_cornered",
        "o_boss_spawn_puff_",
        "o_boss_spawn_puff2",
        "o_wave_management",
        "o_test_enem",
        "o_pumpkin_shad",
        "o_pumpkin_bomb",
        "o_bomb_up",
        "o_bomb_down",
        "o_pumpkin_marker",
        "o_bomb_marker",
        "o_start",
        "O_TUT",
        "o_wave_starter",
        "o_boss_warning",
        "o_start_butt",
        "o_infinite_butt",
        "o_Wave_5",
        "o_credits_butt",
        "o_mcredits_butt",
        "o_End_game",
        "o_ember",
        "o_emby",
        "o_credits",
        "o_mcredits1",
        "o_intro_sequence",
        "o_win",
        "o_win_seq",
        "o_resolution_fix",
        "Start_room",
        "room0",
        "Backgrounds_1",
        "End",
        "WIn",
        "BG",
        "Player",
        "gml_GlobalScript_ScreenShake",
        "gml_Object_o_spawn_puff_delete_Create_0",
        "gml_Object_o_spawn_puff_delete_Other_7",
        "gml_Object_o_spawn_puff_delete_Draw_0",
        "gml_Object_o_spawn_puff_delete_PreCreate_0",
        "gml_Object_o_wall_PreCreate_0",
        "gml_Object_o_pedestal_Create_0",
        "gml_Object_o_pedestal_Step_0",
        "gml_Object_o_pedestal_Draw_0",
        "gml_Object_o_pedestal_PreCreate_0",
        "gml_Object_o_bullet_Create_0",
        "gml_Object_o_bullet_Step_0",
        "gml_Object_o_bullet_Collision_o_wall",
        "gml_Object_o_bullet_Collision_o_pedestal",
        "gml_Object_o_bullet_PreCreate_0",
        "gml_Object_o_bullet_enemy_Collision_o_wall",
        "gml_Object_o_bullet_enemy_Collision_o_bullet",
        "gml_Object_o_bullet_enemy_Collision_o_pedestal",
        "gml_Object_o_bullet_enemy_PreCreate_0",
        "gml_Object_o_test_enem_corner_Create_0",
        "gml_Object_o_test_enem_corner_Step_0",
        "gml_Object_o_test_enem_corner_Collision_o_bullet",
        "gml_Object_o_test_enem_corner_Other_7",
        "gml_Object_o_test_enem_corner_Draw_0",
        "gml_Object_o_test_enem_corner_PreCreate_0",
        "gml_Object_o_test_enem2_Create_0",
        "gml_Object_o_test_enem2_Step_0",
        "gml_Object_o_test_enem2_Collision_o_bullet",
        "gml_Object_o_test_enem2_Collision_o_test_enem2",
        "gml_Object_o_test_enem2_Other_7",
        "gml_Object_o_test_enem2_Draw_0",
        "gml_Object_o_test_enem2_PreCreate_0",
        "gml_Object_o_test_enem3_Create_0",
        "gml_Object_o_test_enem3_Step_0",
        "gml_Object_o_test_enem3_Collision_o_bullet",
        "gml_Object_o_test_enem3_Draw_0",
        "gml_Object_o_test_enem3_PreCreate_0",
        "gml_Object_o_pumpkin_explosion_Create_0",
        "gml_Object_o_pumpkin_explosion_Other_7",
        "gml_Object_o_pumpkin_explosion_PreCreate_0",
        "gml_Object_o_bullet_boss_Collision_o_wall",
        "gml_Object_o_bullet_boss_Collision_o_bullet",
        "gml_Object_o_bullet_boss_Collision_o_pedestal",
        "gml_Object_o_bullet_boss_PreCreate_0",
        "gml_Object_o_player_Create_0",
        "gml_Object_o_player_Step_0",
        "gml_Object_o_player_Collision_o_bullet_enemy",
        "gml_Object_o_player_Collision_o_test_enem_corner",
        "gml_Object_o_player_Collision_o_test_enem2",
        "gml_Object_o_player_Collision_o_test_enem3",
        "gml_Object_o_player_Collision_o_pumpkin_explosion",
        "gml_Object_o_player_Collision_o_bullet_boss",
        "gml_Object_o_player_Draw_0",
        "gml_Object_o_player_KeyPress_27",
        "gml_Object_o_player_PreCreate_0",
        "gml_Object_o_gun_Create_0",
        "gml_Object_o_gun_Step_0",
        "gml_Object_o_gun_Other_7",
        "gml_Object_o_gun_KeyPress_82",
        "gml_Object_o_gun_PreCreate_0",
        "gml_Object_o_camera_Create_0",
        "gml_Object_o_camera_Step_0",
        "gml_Object_o_camera_PreCreate_0",
        "gml_Object_o_fake_cursor_Step_0",
        "gml_Object_o_fake_cursor_PreCreate_0",
        "gml_Object_obj_gui_Create_0",
        "gml_Object_obj_gui_Draw_64",
        "gml_Object_obj_gui_PreCreate_0",
        "gml_Object_o_spawn_point_Create_0",
        "gml_Object_o_spawn_point_Step_0",
        "gml_Object_o_spawn_point_PreCreate_0",
        "gml_Object_obj_pause_Create_0",
        "gml_Object_obj_pause_Draw_64",
        "gml_Object_obj_pause_KeyPress_27",
        "gml_Object_obj_pause_KeyPress_112",
        "gml_Object_obj_pause_KeyPress_9",
        "gml_Object_obj_pause_KeyPress_114",
        "gml_Object_obj_pause_KeyPress_113",
        "gml_Object_obj_pause_PreCreate_0",
        "gml_Object_obj_game_over_Create_0",
        "gml_Object_obj_game_over_Draw_64",
        "gml_Object_obj_game_over_KeyPress_27",
        "gml_Object_obj_game_over_KeyPress_112",
        "gml_Object_obj_game_over_KeyPress_114",
        "gml_Object_obj_game_over_KeyPress_82",
        "gml_Object_obj_game_over_PreCreate_0",
        "gml_Object_o_debris_Create_0",
        "gml_Object_o_debris_Step_0",
        "gml_Object_o_debris_Collision_o_wall",
        "gml_Object_o_debris_PreCreate_0",
        "gml_Object_o_debris_enem_Create_0",
        "gml_Object_o_debris_enem_Step_0",
        "gml_Object_o_debris_enem_Collision_o_wall",
        "gml_Object_o_debris_enem_PreCreate_0",
        "gml_Object_o_blood_debris_Create_0",
        "gml_Object_o_blood_debris_Step_0",
        "gml_Object_o_blood_debris_Collision_o_wall",
        "gml_Object_o_blood_debris_PreCreate_0",
        "gml_Object_o_bullet_debris_Create_0",
        "gml_Object_o_bullet_debris_Step_0",
        "gml_Object_o_bullet_debris_Collision_o_wall",
        "gml_Object_o_bullet_debris_PreCreate_0",
        "gml_Object_o_boss_debris_Create_0",
        "gml_Object_o_boss_debris_Step_0",
        "gml_Object_o_boss_debris_Collision_o_wall",
        "gml_Object_o_boss_debris_PreCreate_0",
        "gml_Object_o_blood_Create_0",
        "gml_Object_o_blood_Other_7",
        "gml_Object_o_blood_PreCreate_0",
        "gml_Object_o_spawn_puff_Create_0",
        "gml_Object_o_spawn_puff_Other_7",
        "gml_Object_o_spawn_puff_Draw_0",
        "gml_Object_o_spawn_puff_PreCreate_0",
        "gml_Object_o_spawner_Other_7",
        "gml_Object_o_spawner_PreCreate_0",
        "gml_Object_o_boss_spawner_Other_7",
        "gml_Object_o_boss_spawner_PreCreate_0",
        "gml_Object_o_spawner_corners_Other_7",
        "gml_Object_o_spawner_corners_PreCreate_0",
        "gml_Object_o_player_puff_Create_0",
        "gml_Object_o_player_puff_Other_7",
        "gml_Object_o_player_puff_Draw_0",
        "gml_Object_o_player_puff_PreCreate_0",
        "gml_Object_o_ped_puff_Create_0",
        "gml_Object_o_ped_puff_Other_7",
        "gml_Object_o_ped_puff_Draw_0",
        "gml_Object_o_ped_puff_PreCreate_0",
        "gml_Object_o_spawn_puff_cornered_Create_0",
        "gml_Object_o_spawn_puff_cornered_Other_7",
        "gml_Object_o_spawn_puff_cornered_Draw_0",
        "gml_Object_o_spawn_puff_cornered_PreCreate_0",
        "gml_Object_o_boss_spawn_puff__Create_0",
        "gml_Object_o_boss_spawn_puff__Other_7",
        "gml_Object_o_boss_spawn_puff__Draw_0",
        "gml_Object_o_boss_spawn_puff__PreCreate_0",
        "gml_Object_o_boss_spawn_puff2_Create_0",
        "gml_Object_o_boss_spawn_puff2_Other_7",
        "gml_Object_o_boss_spawn_puff2_Draw_0",
        "gml_Object_o_boss_spawn_puff2_PreCreate_0",
        "gml_Object_o_wave_management_Create_0",
        "gml_Object_o_wave_management_Step_0",
        "gml_Object_o_wave_management_PreCreate_0",
        "gml_Object_o_test_enem_Create_0",
        "gml_Object_o_test_enem_Step_0",
        "gml_Object_o_test_enem_Collision_o_bullet",
        "gml_Object_o_test_enem_Other_7",
        "gml_Object_o_test_enem_Draw_0",
        "gml_Object_o_test_enem_PreCreate_0",
        "gml_Object_o_pumpkin_shad_Create_0",
        "gml_Object_o_pumpkin_shad_Step_0",
        "gml_Object_o_pumpkin_shad_PreCreate_0",
        "gml_Object_o_pumpkin_bomb_Create_0",
        "gml_Object_o_pumpkin_bomb_Step_0",
        "gml_Object_o_pumpkin_bomb_Draw_0",
        "gml_Object_o_pumpkin_bomb_PreCreate_0",
        "gml_Object_o_bomb_up_Create_0",
        "gml_Object_o_bomb_up_Step_0",
        "gml_Object_o_bomb_up_Draw_0",
        "gml_Object_o_bomb_up_PreCreate_0",
        "gml_Object_o_bomb_down_Create_0",
        "gml_Object_o_bomb_down_Step_0",
        "gml_Object_o_bomb_down_Draw_0",
        "gml_Object_o_bomb_down_PreCreate_0",
        "gml_Object_o_pumpkin_marker_Create_0",
        "gml_Object_o_pumpkin_marker_Step_0",
        "gml_Object_o_pumpkin_marker_PreCreate_0",
        "gml_Object_o_bomb_marker_Create_0",
        "gml_Object_o_bomb_marker_Step_0",
        "gml_Object_o_bomb_marker_PreCreate_0",
        "gml_Object_o_start_Create_0",
        "gml_Object_o_start_Step_0",
        "gml_Object_o_start_PreCreate_0",
        "gml_Object_death_Create_0",
        "gml_Object_death_Step_0",
        "gml_Object_death_PreCreate_0",
        "gml_Object_O_TUT_Create_0",
        "gml_Object_O_TUT_Step_0",
        "gml_Object_O_TUT_PreCreate_0",
        "gml_Object_o_wave_starter_Create_0",
        "gml_Object_o_wave_starter_Step_0",
        "gml_Object_o_wave_starter_Draw_0",
        "gml_Object_o_wave_starter_Draw_64",
        "gml_Object_o_wave_starter_PreCreate_0",
        "gml_Object_o_boss_warning_Create_0",
        "gml_Object_o_boss_warning_Step_0",
        "gml_Object_o_boss_warning_Draw_0",
        "gml_Object_o_boss_warning_PreCreate_0",
        "gml_Object_o_start_butt_Create_0",
        "gml_Object_o_start_butt_Step_0",
        "gml_Object_o_start_butt_Draw_0",
        "gml_Object_o_start_butt_PreCreate_0",
        "gml_Object_o_infinite_butt_Create_0",
        "gml_Object_o_infinite_butt_Step_0",
        "gml_Object_o_infinite_butt_Draw_0",
        "gml_Object_o_infinite_butt_PreCreate_0",
        "gml_Object_o_Wave_5_Create_0",
        "gml_Object_o_Wave_5_Step_0",
        "gml_Object_o_Wave_5_Draw_0",
        "gml_Object_o_Wave_5_PreCreate_0",
        "gml_Object_o_credits_butt_Create_0",
        "gml_Object_o_credits_butt_Step_0",
        "gml_Object_o_credits_butt_Draw_0",
        "gml_Object_o_credits_butt_PreCreate_0",
        "gml_Object_o_mcredits_butt_Create_0",
        "gml_Object_o_mcredits_butt_Step_0",
        "gml_Object_o_mcredits_butt_Draw_0",
        "gml_Object_o_mcredits_butt_PreCreate_0",
        "gml_Object_o_End_game_Create_0",
        "gml_Object_o_End_game_Step_0",
        "gml_Object_o_End_game_Draw_0",
        "gml_Object_o_End_game_PreCreate_0",
        "gml_Object_o_ember_Create_0",
        "gml_Object_o_ember_Step_0",
        "gml_Object_o_ember_PreCreate_0",
        "gml_Object_o_emby_Create_0",
        "gml_Object_o_emby_Step_0",
        "gml_Object_o_emby_PreCreate_0",
        "gml_Object_o_credits_Draw_64",
        "gml_Object_o_credits_PreCreate_0",
        "gml_Object_o_mcredits1_Draw_64",
        "gml_Object_o_mcredits1_PreCreate_0",
        "gml_Object_o_intro_sequence_Create_0",
        "gml_Object_o_intro_sequence_Step_0",
        "gml_Object_o_intro_sequence_Draw_64",
        "gml_Object_o_intro_sequence_PreCreate_0",
        "gml_Object_o_win_Create_0",
        "gml_Object_o_win_Step_1",
        "gml_Object_o_win_Draw_64",
        "gml_Object_o_win_PreCreate_0",
        "gml_Object_o_win_seq_Create_0",
        "gml_Object_o_win_seq_Step_0",
        "gml_Object_o_win_seq_Draw_64",
        "gml_Object_o_win_seq_PreCreate_0",
        "gml_Object_o_resolution_fix_PreCreate_0",
        "ONDA ",
        "ONDA",
        "º ONDA",
        "TEMPO:",
        "F3 PARA TELA CHEIA",
        "EM PAUSA",
        " EM ",
        "TESTE BOSS",
        "VOLTAR",
        "VOCÊ CHEGOU NA ",
        "º ONDA EM "
    ]
}